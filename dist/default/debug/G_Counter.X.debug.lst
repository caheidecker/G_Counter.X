

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Oct 29 15:02:49 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22  0000                     
    23                           ; Version 1.43
    24                           ; Generated 25/07/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F26K22 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _ANSELA	set	3896
    58  0000                     _ANSELC	set	3898
    59  0000                     _ANSELB	set	3897
    60  0000                     _T0CONbits	set	4053
    61  0000                     _TMR0L	set	4054
    62  0000                     _T0CON	set	4053
    63  0000                     _TRISAbits	set	3986
    64  0000                     _TRISC	set	3988
    65  0000                     _TRISB	set	3987
    66  0000                     _OSCCON	set	4051
    67  0000                     _INTCONbits	set	4082
    68  0000                     _PORTCbits	set	3970
    69  0000                     _PORTBbits	set	3969
    70                           
    71                           ; #config settings
    72  0000                     
    73                           	psect	cinit
    74  00FD00                     __pcinit:
    75                           	opt stack 0
    76  00FD00                     start_initialization:
    77                           	opt stack 0
    78  00FD00                     __initialization:
    79                           	opt stack 0
    80                           
    81                           ; Clear objects allocated to COMRAM (2 bytes)
    82  00FD00  6A44               	clrf	(__pbssCOMRAM+1)& (0+255),c
    83  00FD02  6A43               	clrf	__pbssCOMRAM& (0+255),c
    84  00FD04                     end_of_initialization:
    85                           	opt stack 0
    86  00FD04                     __end_of__initialization:
    87                           	opt stack 0
    88  00FD04  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    89  00FD06  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    90  00FD08  0100               	movlb	0
    91  00FD0A  EF62  F07F         	goto	_main	;jump to C main() function
    92                           
    93                           	psect	bssCOMRAM
    94  000043                     __pbssCOMRAM:
    95                           	opt stack 0
    96  000043                     _counter:
    97                           	opt stack 0
    98  000043                     	ds	2
    99                           
   100                           	psect	cstackCOMRAM
   101  000001                     __pcstackCOMRAM:
   102                           	opt stack 0
   103  000001                     ??_Timer0_ISR:
   104  000001                     ?_Set_Cursor:
   105                           	opt stack 0
   106  000001                     
   107                           ; 2 bytes @ 0x0
   108  000001                     	ds	18
   109  000013                     ?___lwdiv:
   110                           	opt stack 0
   111  000013                     ?___lwmod:
   112                           	opt stack 0
   113  000013                     Lcd_Port@a:
   114                           	opt stack 0
   115  000013                     ___lwdiv@dividend:
   116                           	opt stack 0
   117  000013                     ___lwmod@dividend:
   118                           	opt stack 0
   119                           
   120                           ; 2 bytes @ 0x12
   121  000013                     	ds	1
   122  000014                     ??_Lcd_Write_Char:
   123  000014                     Lcd_Cmd@a:
   124                           	opt stack 0
   125                           
   126                           ; 1 bytes @ 0x13
   127  000014                     	ds	1
   128  000015                     Lcd_Write_Char@temp:
   129                           	opt stack 0
   130  000015                     ___lwdiv@divisor:
   131                           	opt stack 0
   132  000015                     ___lwmod@divisor:
   133                           	opt stack 0
   134                           
   135                           ; 2 bytes @ 0x14
   136  000015                     	ds	1
   137  000016                     Lcd_Write_Char@y:
   138                           	opt stack 0
   139                           
   140                           ; 1 bytes @ 0x15
   141  000016                     	ds	1
   142  000017                     Lcd_Write_Char@a:
   143                           	opt stack 0
   144  000017                     ___lwmod@counter:
   145                           	opt stack 0
   146  000017                     ___lwdiv@quotient:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0x16
   150  000017                     	ds	1
   151  000018                     Lcd_Write_String@a:
   152                           	opt stack 0
   153                           
   154                           ; 2 bytes @ 0x17
   155  000018                     	ds	1
   156  000019                     ___lwdiv@counter:
   157                           	opt stack 0
   158                           
   159                           ; 1 bytes @ 0x18
   160  000019                     	ds	1
   161  00001A                     Lcd_Write_String@i:
   162                           	opt stack 0
   163  00001A                     utoa@buf:
   164                           	opt stack 0
   165                           
   166                           ; 2 bytes @ 0x19
   167  00001A                     	ds	2
   168  00001C                     utoa@val:
   169                           	opt stack 0
   170                           
   171                           ; 2 bytes @ 0x1B
   172  00001C                     	ds	2
   173  00001E                     utoa@base:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x1D
   177  00001E                     	ds	2
   178  000020                     utoa@v:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x1F
   182  000020                     	ds	2
   183  000022                     utoa@c:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0x21
   187  000022                     	ds	1
   188  000023                     
   189                           ; 2 bytes @ 0x22
   190  000023                     	ds	2
   191  000025                     
   192                           ; 3 bytes @ 0x24
   193  000025                     	ds	3
   194  000028                     ??_main:
   195                           
   196                           ; 1 bytes @ 0x27
   197  000028                     	ds	2
   198  00002A                     main@array:
   199                           	opt stack 0
   200                           
   201                           ; 25 bytes @ 0x29
   202  00002A                     	ds	25
   203                           
   204 ;;
   205 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   206 ;;
   207 ;; *************** function _main *****************
   208 ;; Defined at:
   209 ;;		line 56 in file "CountMain.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;  argc            2   34[COMRAM] int 
   212 ;;  argv            3   36[COMRAM] PTR PTR unsigned char 
   213 ;; Auto vars:     Size  Location     Type
   214 ;;  array          25   41[COMRAM] unsigned char [25]
   215 ;; Return value:  Size  Location     Type
   216 ;;                  2   34[COMRAM] int 
   217 ;; Registers used:
   218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, bsr, cstack
   219 ;; Tracked objects:
   220 ;;		On entry : 0/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   224 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   225 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   227 ;;      Totals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   228 ;;Total ram usage:       32 bytes
   229 ;; Hardware stack levels required when called:    4
   230 ;; This function calls:
   231 ;;		_Lcd_Clear
   232 ;;		_Lcd_Init
   233 ;;		_Lcd_Write_String
   234 ;;		_Set_Cursor
   235 ;;		_utoa
   236 ;; This function is called by:
   237 ;;		Startup code after reset
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           	psect	text0
   242  00FEC4                     __ptext0:
   243                           	opt stack 0
   244  00FEC4                     _main:
   245                           	opt stack 27
   246                           
   247                           ;CountMain.c: 58: counter = 0;
   248                           
   249                           ;incstack = 0
   250  00FEC4  0E00               	movlw	0
   251  00FEC6  6E44               	movwf	_counter+1,c
   252  00FEC8  0E00               	movlw	0
   253  00FECA  6E43               	movwf	_counter,c
   254                           
   255                           ;CountMain.c: 60: OSCCON = 0x72;
   256  00FECC  0E72               	movlw	114
   257  00FECE  6ED3               	movwf	4051,c	;volatile
   258                           
   259                           ;CountMain.c: 61: ANSELB = 0;
   260  00FED0  0E00               	movlw	0
   261  00FED2  010F               	movlb	15	; () banked
   262  00FED4  6F39               	movwf	57,b	;volatile
   263                           
   264                           ;CountMain.c: 62: ANSELC = 0;
   265  00FED6  0E00               	movlw	0
   266  00FED8  010F               	movlb	15	; () banked
   267  00FEDA  6F3A               	movwf	58,b	;volatile
   268                           
   269                           ;CountMain.c: 63: ANSELA = 0;
   270  00FEDC  0E00               	movlw	0
   271  00FEDE  010F               	movlb	15	; () banked
   272  00FEE0  6F38               	movwf	56,b	;volatile
   273                           
   274                           ;CountMain.c: 64: TRISB = 0xC0;
   275  00FEE2  0EC0               	movlw	192
   276  00FEE4  6E93               	movwf	3987,c	;volatile
   277                           
   278                           ;CountMain.c: 65: TRISC = 0;
   279  00FEE6  0E00               	movlw	0
   280  00FEE8  6E94               	movwf	3988,c	;volatile
   281                           
   282                           ; BSR set to: 15
   283                           ;CountMain.c: 66: TRISAbits.RA4 = 1;
   284  00FEEA  8892               	bsf	3986,4,c	;volatile
   285                           
   286                           ;CountMain.c: 67: T0CON = 0x68;
   287  00FEEC  0E68               	movlw	104
   288  00FEEE  6ED5               	movwf	4053,c	;volatile
   289                           
   290                           ;CountMain.c: 68: TMR0L = 246;
   291  00FEF0  0EF6               	movlw	246
   292  00FEF2  6ED6               	movwf	4054,c	;volatile
   293                           
   294                           ; BSR set to: 15
   295                           ;CountMain.c: 70: INTCONbits.TMR0IE = 1;
   296  00FEF4  8AF2               	bsf	intcon,5,c	;volatile
   297                           
   298                           ; BSR set to: 15
   299                           ;CountMain.c: 71: INTCONbits.TMR0IF = 0;
   300  00FEF6  94F2               	bcf	intcon,2,c	;volatile
   301                           
   302                           ; BSR set to: 15
   303                           ;CountMain.c: 72: INTCONbits.PEIE = 1;
   304  00FEF8  8CF2               	bsf	intcon,6,c	;volatile
   305                           
   306                           ; BSR set to: 15
   307                           ;CountMain.c: 73: INTCONbits.GIE = 1;
   308  00FEFA  8EF2               	bsf	intcon,7,c	;volatile
   309                           
   310                           ; BSR set to: 15
   311                           ;CountMain.c: 75: T0CONbits.TMR0ON = 1;
   312  00FEFC  8ED5               	bsf	4053,7,c	;volatile
   313                           
   314                           ; BSR set to: 15
   315                           ;CountMain.c: 77: Lcd_Init();
   316  00FEFE  EC34  F07F         	call	_Lcd_Init	;wreg free
   317                           
   318                           ;CountMain.c: 78: Lcd_Clear();
   319  00FF02  EC79  F07E         	call	_Lcd_Clear	;wreg free
   320  00FF06                     
   321                           ;CountMain.c: 80: {
   322                           ;CountMain.c: 82: char array[25];
   323                           ;CountMain.c: 83: Set_Cursor(1,1);
   324  00FF06  0E00               	movlw	0
   325  00FF08  6E02               	movwf	?_Set_Cursor+1,c
   326  00FF0A  0E01               	movlw	1
   327  00FF0C  6E01               	movwf	?_Set_Cursor,c
   328  00FF0E  0E00               	movlw	0
   329  00FF10  6E04               	movwf	?_Set_Cursor+3,c
   330  00FF12  0E01               	movlw	1
   331  00FF14  6E03               	movwf	?_Set_Cursor+2,c
   332  00FF16  EC00  F000         	call	_Set_Cursor	;wreg free
   333                           
   334                           ;CountMain.c: 86: utoa(array,counter,10);
   335  00FF1A  0E2A               	movlw	low main@array
   336  00FF1C  6E1A               	movwf	utoa@buf,c
   337  00FF1E  0E00               	movlw	high main@array
   338  00FF20  6E1B               	movwf	utoa@buf+1,c
   339  00FF22  C043  F01C         	movff	_counter,utoa@val
   340  00FF26  C044  F01D         	movff	_counter+1,utoa@val+1
   341  00FF2A  0E00               	movlw	0
   342  00FF2C  6E1F               	movwf	utoa@base+1,c
   343  00FF2E  0E0A               	movlw	10
   344  00FF30  6E1E               	movwf	utoa@base,c
   345  00FF32  ECAE  F07F         	call	_utoa	;wreg free
   346                           
   347                           ;CountMain.c: 88: Lcd_Write_String(array);
   348  00FF36  0E2A               	movlw	low main@array
   349  00FF38  6E18               	movwf	Lcd_Write_String@a,c
   350  00FF3A  0E00               	movlw	high main@array
   351  00FF3C  6E19               	movwf	Lcd_Write_String@a+1,c
   352  00FF3E  ECAC  F07E         	call	_Lcd_Write_String	;wreg free
   353                           
   354                           ;CountMain.c: 90: _delay((unsigned long)((1000)*(16000000/4000.0)));
   355  00FF42  0E15               	movlw	21
   356  00FF44  6E29               	movwf	(??_main+1)& (0+255),c
   357  00FF46  0E4B               	movlw	75
   358  00FF48  6E28               	movwf	??_main& (0+255),c
   359  00FF4A  0EBE               	movlw	190
   360  00FF4C                     u307:
   361  00FF4C  2EE8               	decfsz	wreg,f,c
   362  00FF4E  D7FE               	bra	u307
   363  00FF50  2E28               	decfsz	??_main& (0+255),f,c
   364  00FF52  D7FC               	bra	u307
   365  00FF54  2E29               	decfsz	(??_main+1)& (0+255),f,c
   366  00FF56  D7FA               	bra	u307
   367  00FF58  D000               	nop2	
   368  00FF5A  D7D5               	goto	l84
   369  00FF5C                     __end_of_main:
   370                           	opt stack 0
   371                           intcon	equ	0xFF2
   372                           wreg	equ	0xFE8
   373                           
   374 ;; *************** function _utoa *****************
   375 ;; Defined at:
   376 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\itoa.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;  buf             2   25[COMRAM] PTR unsigned char 
   379 ;;		 -> main@array(25), 
   380 ;;  val             2   27[COMRAM] unsigned int 
   381 ;;  base            2   29[COMRAM] int 
   382 ;; Auto vars:     Size  Location     Type
   383 ;;  v               2   31[COMRAM] unsigned int 
   384 ;;  c               1   33[COMRAM] unsigned char 
   385 ;; Return value:  Size  Location     Type
   386 ;;                  2   25[COMRAM] PTR unsigned char 
   387 ;; Registers used:
   388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   389 ;; Tracked objects:
   390 ;;		On entry : 0/0
   391 ;;		On exit  : 0/0
   392 ;;		Unchanged: 0/0
   393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   394 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   395 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   397 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   398 ;;Total ram usage:        9 bytes
   399 ;; Hardware stack levels used:    1
   400 ;; Hardware stack levels required when called:    2
   401 ;; This function calls:
   402 ;;		___lwdiv
   403 ;;		___lwmod
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text1
   410  00FF5C                     __ptext1:
   411                           	opt stack 0
   412  00FF5C                     _utoa:
   413                           	opt stack 28
   414                           
   415                           ;incstack = 0
   416  00FF5C  C01C  F020         	movff	utoa@val,utoa@v
   417  00FF60  C01D  F021         	movff	utoa@val+1,utoa@v+1
   418  00FF64  C020  F013         	movff	utoa@v,___lwdiv@dividend
   419  00FF68  C021  F014         	movff	utoa@v+1,___lwdiv@dividend+1
   420  00FF6C  C01E  F015         	movff	utoa@base,___lwdiv@divisor
   421  00FF70  C01F  F016         	movff	utoa@base+1,___lwdiv@divisor+1
   422  00FF74  EC0B  F07F         	call	___lwdiv	;wreg free
   423  00FF78  C013  F020         	movff	?___lwdiv,utoa@v
   424  00FF7C  C014  F021         	movff	?___lwdiv+1,utoa@v+1
   425  00FF80  4A1A               	infsnz	utoa@buf,f,c
   426  00FF82  2A1B               	incf	utoa@buf+1,f,c
   427  00FF84  5020               	movf	utoa@v,w,c
   428  00FF86  1021               	iorwf	utoa@v+1,w,c
   429  00FF88  A4D8               	btfss	status,2,c
   430  00FF8A  D7EC               	goto	l423
   431  00FF8C  C01A  FFD9         	movff	utoa@buf,fsr2l
   432  00FF90  C01B  FFDA         	movff	utoa@buf+1,fsr2h
   433  00FF94  0E00               	movlw	0
   434  00FF96  6EDF               	movwf	indf2,c
   435  00FF98  061A               	decf	utoa@buf,f,c
   436  00FF9A  A0D8               	btfss	status,0,c
   437  00FF9C  061B               	decf	utoa@buf+1,f,c
   438  00FF9E  C01C  F013         	movff	utoa@val,___lwmod@dividend
   439  00FFA2  C01D  F014         	movff	utoa@val+1,___lwmod@dividend+1
   440  00FFA6  C01E  F015         	movff	utoa@base,___lwmod@divisor
   441  00FFAA  C01F  F016         	movff	utoa@base+1,___lwmod@divisor+1
   442  00FFAE  ECC6  F07E         	call	___lwmod	;wreg free
   443  00FFB2  5013               	movf	?___lwmod,w,c
   444  00FFB4  6E22               	movwf	utoa@c,c
   445  00FFB6  C01C  F013         	movff	utoa@val,___lwdiv@dividend
   446  00FFBA  C01D  F014         	movff	utoa@val+1,___lwdiv@dividend+1
   447  00FFBE  C01E  F015         	movff	utoa@base,___lwdiv@divisor
   448  00FFC2  C01F  F016         	movff	utoa@base+1,___lwdiv@divisor+1
   449  00FFC6  EC0B  F07F         	call	___lwdiv	;wreg free
   450  00FFCA  C013  F01C         	movff	?___lwdiv,utoa@val
   451  00FFCE  C014  F01D         	movff	?___lwdiv+1,utoa@val+1
   452  00FFD2  0E09               	movlw	9
   453  00FFD4  6422               	cpfsgt	utoa@c,c
   454  00FFD6  D002               	goto	l426
   455  00FFD8  0E07               	movlw	7
   456  00FFDA  2622               	addwf	utoa@c,f,c
   457  00FFDC                     l426:
   458  00FFDC  0E30               	movlw	48
   459  00FFDE  2622               	addwf	utoa@c,f,c
   460  00FFE0  C01A  FFD9         	movff	utoa@buf,fsr2l
   461  00FFE4  C01B  FFDA         	movff	utoa@buf+1,fsr2h
   462  00FFE8  C022  FFDF         	movff	utoa@c,indf2
   463  00FFEC  061A               	decf	utoa@buf,f,c
   464  00FFEE  A0D8               	btfss	status,0,c
   465  00FFF0  061B               	decf	utoa@buf+1,f,c
   466  00FFF2  501C               	movf	utoa@val,w,c
   467  00FFF4  101D               	iorwf	utoa@val+1,w,c
   468  00FFF6  A4D8               	btfss	status,2,c
   469  00FFF8  D7D2               	goto	l425
   470                           
   471                           ;	Return value of _utoa is never used
   472  00FFFA  4A1A               	infsnz	utoa@buf,f,c
   473  00FFFC  2A1B               	incf	utoa@buf+1,f,c
   474  00FFFE  0012               	return	
   475  010000                     __end_of_utoa:
   476                           	opt stack 0
   477                           intcon	equ	0xFF2
   478                           wreg	equ	0xFE8
   479                           indf2	equ	0xFDF
   480                           fsr2h	equ	0xFDA
   481                           fsr2l	equ	0xFD9
   482                           status	equ	0xFD8
   483                           
   484 ;; *************** function ___lwmod *****************
   485 ;; Defined at:
   486 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;  dividend        2   18[COMRAM] unsigned int 
   489 ;;  divisor         2   20[COMRAM] unsigned int 
   490 ;; Auto vars:     Size  Location     Type
   491 ;;  counter         1   22[COMRAM] unsigned char 
   492 ;; Return value:  Size  Location     Type
   493 ;;                  2   18[COMRAM] unsigned int 
   494 ;; Registers used:
   495 ;;		wreg, status,2, status,0
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;Total ram usage:        5 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; Hardware stack levels required when called:    1
   508 ;; This function calls:
   509 ;;		Nothing
   510 ;; This function is called by:
   511 ;;		_utoa
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515                           	psect	text2
   516  00FD8C                     __ptext2:
   517                           	opt stack 0
   518  00FD8C                     ___lwmod:
   519                           	opt stack 28
   520                           
   521                           ;incstack = 0
   522  00FD8C  5015               	movf	___lwmod@divisor,w,c
   523  00FD8E  1016               	iorwf	___lwmod@divisor+1,w,c
   524  00FD90  B4D8               	btfsc	status,2,c
   525  00FD92  D018               	goto	l521
   526  00FD94  0E01               	movlw	1
   527  00FD96  6E17               	movwf	___lwmod@counter,c
   528  00FD98  D004               	goto	l516
   529  00FD9A  90D8               	bcf	status,0,c
   530  00FD9C  3615               	rlcf	___lwmod@divisor,f,c
   531  00FD9E  3616               	rlcf	___lwmod@divisor+1,f,c
   532  00FDA0  2A17               	incf	___lwmod@counter,f,c
   533  00FDA2                     l516:
   534  00FDA2  AE16               	btfss	___lwmod@divisor+1,7,c
   535  00FDA4  D7FA               	goto	l517
   536  00FDA6                     u240:
   537  00FDA6  5015               	movf	___lwmod@divisor,w,c
   538  00FDA8  5C13               	subwf	___lwmod@dividend,w,c
   539  00FDAA  5016               	movf	___lwmod@divisor+1,w,c
   540  00FDAC  5814               	subwfb	___lwmod@dividend+1,w,c
   541  00FDAE  A0D8               	btfss	status,0,c
   542  00FDB0  D004               	goto	l520
   543  00FDB2  5015               	movf	___lwmod@divisor,w,c
   544  00FDB4  5E13               	subwf	___lwmod@dividend,f,c
   545  00FDB6  5016               	movf	___lwmod@divisor+1,w,c
   546  00FDB8  5A14               	subwfb	___lwmod@dividend+1,f,c
   547  00FDBA                     l520:
   548  00FDBA  90D8               	bcf	status,0,c
   549  00FDBC  3216               	rrcf	___lwmod@divisor+1,f,c
   550  00FDBE  3215               	rrcf	___lwmod@divisor,f,c
   551  00FDC0  2E17               	decfsz	___lwmod@counter,f,c
   552  00FDC2  D7F1               	goto	u240
   553  00FDC4                     l521:
   554  00FDC4  C013  F013         	movff	___lwmod@dividend,?___lwmod
   555  00FDC8  C014  F014         	movff	___lwmod@dividend+1,?___lwmod+1
   556  00FDCC  0012               	return		;funcret
   557  00FDCE                     __end_of___lwmod:
   558                           	opt stack 0
   559                           intcon	equ	0xFF2
   560                           wreg	equ	0xFE8
   561                           indf2	equ	0xFDF
   562                           fsr2h	equ	0xFDA
   563                           fsr2l	equ	0xFD9
   564                           status	equ	0xFD8
   565                           
   566 ;; *************** function ___lwdiv *****************
   567 ;; Defined at:
   568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
   569 ;; Parameters:    Size  Location     Type
   570 ;;  dividend        2   18[COMRAM] unsigned int 
   571 ;;  divisor         2   20[COMRAM] unsigned int 
   572 ;; Auto vars:     Size  Location     Type
   573 ;;  quotient        2   22[COMRAM] unsigned int 
   574 ;;  counter         1   24[COMRAM] unsigned char 
   575 ;; Return value:  Size  Location     Type
   576 ;;                  2   18[COMRAM] unsigned int 
   577 ;; Registers used:
   578 ;;		wreg, status,2, status,0
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   584 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   587 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   588 ;;Total ram usage:        7 bytes
   589 ;; Hardware stack levels used:    1
   590 ;; Hardware stack levels required when called:    1
   591 ;; This function calls:
   592 ;;		Nothing
   593 ;; This function is called by:
   594 ;;		_utoa
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text3
   599  00FE16                     __ptext3:
   600                           	opt stack 0
   601  00FE16                     ___lwdiv:
   602                           	opt stack 28
   603                           
   604                           ;incstack = 0
   605  00FE16  0E00               	movlw	0
   606  00FE18  6E18               	movwf	___lwdiv@quotient+1,c
   607  00FE1A  0E00               	movlw	0
   608  00FE1C  6E17               	movwf	___lwdiv@quotient,c
   609  00FE1E  5015               	movf	___lwdiv@divisor,w,c
   610  00FE20  1016               	iorwf	___lwdiv@divisor+1,w,c
   611  00FE22  B4D8               	btfsc	status,2,c
   612  00FE24  D01C               	goto	l511
   613  00FE26  0E01               	movlw	1
   614  00FE28  6E19               	movwf	___lwdiv@counter,c
   615  00FE2A  D004               	goto	l506
   616  00FE2C  90D8               	bcf	status,0,c
   617  00FE2E  3615               	rlcf	___lwdiv@divisor,f,c
   618  00FE30  3616               	rlcf	___lwdiv@divisor+1,f,c
   619  00FE32  2A19               	incf	___lwdiv@counter,f,c
   620  00FE34                     l506:
   621  00FE34  AE16               	btfss	___lwdiv@divisor+1,7,c
   622  00FE36  D7FA               	goto	l507
   623  00FE38                     u210:
   624  00FE38  90D8               	bcf	status,0,c
   625  00FE3A  3617               	rlcf	___lwdiv@quotient,f,c
   626  00FE3C  3618               	rlcf	___lwdiv@quotient+1,f,c
   627  00FE3E  5015               	movf	___lwdiv@divisor,w,c
   628  00FE40  5C13               	subwf	___lwdiv@dividend,w,c
   629  00FE42  5016               	movf	___lwdiv@divisor+1,w,c
   630  00FE44  5814               	subwfb	___lwdiv@dividend+1,w,c
   631  00FE46  A0D8               	btfss	status,0,c
   632  00FE48  D005               	goto	l510
   633  00FE4A  5015               	movf	___lwdiv@divisor,w,c
   634  00FE4C  5E13               	subwf	___lwdiv@dividend,f,c
   635  00FE4E  5016               	movf	___lwdiv@divisor+1,w,c
   636  00FE50  5A14               	subwfb	___lwdiv@dividend+1,f,c
   637  00FE52  8017               	bsf	___lwdiv@quotient,0,c
   638  00FE54                     l510:
   639  00FE54  90D8               	bcf	status,0,c
   640  00FE56  3216               	rrcf	___lwdiv@divisor+1,f,c
   641  00FE58  3215               	rrcf	___lwdiv@divisor,f,c
   642  00FE5A  2E19               	decfsz	___lwdiv@counter,f,c
   643  00FE5C  D7ED               	goto	u210
   644  00FE5E                     l511:
   645  00FE5E  C017  F013         	movff	___lwdiv@quotient,?___lwdiv
   646  00FE62  C018  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
   647  00FE66  0012               	return		;funcret
   648  00FE68                     __end_of___lwdiv:
   649                           	opt stack 0
   650                           intcon	equ	0xFF2
   651                           wreg	equ	0xFE8
   652                           indf2	equ	0xFDF
   653                           fsr2h	equ	0xFDA
   654                           fsr2l	equ	0xFD9
   655                           status	equ	0xFD8
   656                           
   657 ;; *************** function _Lcd_Write_String *****************
   658 ;; Defined at:
   659 ;;		line 113 in file "LCD.h"
   660 ;; Parameters:    Size  Location     Type
   661 ;;  a               2   23[COMRAM] PTR unsigned char 
   662 ;;		 -> main@array(25), 
   663 ;; Auto vars:     Size  Location     Type
   664 ;;  i               2   25[COMRAM] int 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   674 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;Total ram usage:        4 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    3
   681 ;; This function calls:
   682 ;;		_Lcd_Write_Char
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text4
   689  00FD58                     __ptext4:
   690                           	opt stack 0
   691  00FD58                     _Lcd_Write_String:
   692                           	opt stack 27
   693                           
   694                           ;LCD.h: 115: int i;
   695                           ;LCD.h: 116: for(i=0;a[i]!='\0';i++)
   696                           
   697                           ;incstack = 0
   698  00FD58  0E00               	movlw	0
   699  00FD5A  6E1B               	movwf	Lcd_Write_String@i+1,c
   700  00FD5C  0E00               	movlw	0
   701  00FD5E  6E1A               	movwf	Lcd_Write_String@i,c
   702  00FD60  D00B               	goto	l68
   703  00FD62                     
   704                           ;LCD.h: 117: Lcd_Write_Char(a[i]);
   705  00FD62  501A               	movf	Lcd_Write_String@i,w,c
   706  00FD64  2418               	addwf	Lcd_Write_String@a,w,c
   707  00FD66  6ED9               	movwf	fsr2l,c
   708  00FD68  501B               	movf	Lcd_Write_String@i+1,w,c
   709  00FD6A  2019               	addwfc	Lcd_Write_String@a+1,w,c
   710  00FD6C  6EDA               	movwf	fsr2h,c
   711  00FD6E  50DF               	movf	indf2,w,c
   712  00FD70  ECE7  F07E         	call	_Lcd_Write_Char
   713  00FD74  4A1A               	infsnz	Lcd_Write_String@i,f,c
   714  00FD76  2A1B               	incf	Lcd_Write_String@i+1,f,c
   715  00FD78                     l68:
   716  00FD78  501A               	movf	Lcd_Write_String@i,w,c
   717  00FD7A  2418               	addwf	Lcd_Write_String@a,w,c
   718  00FD7C  6ED9               	movwf	fsr2l,c
   719  00FD7E  501B               	movf	Lcd_Write_String@i+1,w,c
   720  00FD80  2019               	addwfc	Lcd_Write_String@a+1,w,c
   721  00FD82  6EDA               	movwf	fsr2h,c
   722  00FD84  50DF               	movf	indf2,w,c
   723  00FD86  B4D8               	btfsc	status,2,c
   724  00FD88  0012               	return	
   725  00FD8A  D7EB               	goto	l69
   726  00FD8C                     __end_of_Lcd_Write_String:
   727                           	opt stack 0
   728                           intcon	equ	0xFF2
   729                           wreg	equ	0xFE8
   730                           indf2	equ	0xFDF
   731                           fsr2h	equ	0xFDA
   732                           fsr2l	equ	0xFD9
   733                           status	equ	0xFD8
   734                           
   735 ;; *************** function _Lcd_Write_Char *****************
   736 ;; Defined at:
   737 ;;		line 97 in file "LCD.h"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  a               1    wreg     unsigned char 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  a               1   22[COMRAM] unsigned char 
   742 ;;  y               1   21[COMRAM] unsigned char 
   743 ;;  temp            1   20[COMRAM] unsigned char 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, status,2, status,0, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   756 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   757 ;;Total ram usage:        4 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; Hardware stack levels required when called:    2
   760 ;; This function calls:
   761 ;;		_Lcd_Port
   762 ;; This function is called by:
   763 ;;		_Lcd_Write_String
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text5
   768  00FDCE                     __ptext5:
   769                           	opt stack 0
   770  00FDCE                     _Lcd_Write_Char:
   771                           	opt stack 27
   772                           
   773                           ;incstack = 0
   774                           ;Lcd_Write_Char@a stored from wreg
   775  00FDCE  6E17               	movwf	Lcd_Write_Char@a,c
   776                           
   777                           ;LCD.h: 99: char temp,y;
   778                           ;LCD.h: 100: temp = a&0x0F;
   779  00FDD0  5017               	movf	Lcd_Write_Char@a,w,c
   780  00FDD2  0B0F               	andlw	15
   781  00FDD4  6E15               	movwf	Lcd_Write_Char@temp,c
   782                           
   783                           ;LCD.h: 101: y = a&0xF0;
   784  00FDD6  5017               	movf	Lcd_Write_Char@a,w,c
   785  00FDD8  0BF0               	andlw	240
   786  00FDDA  6E16               	movwf	Lcd_Write_Char@y,c
   787                           
   788                           ;LCD.h: 102: PORTCbits.RC0 = 1;
   789  00FDDC  8082               	bsf	3970,0,c	;volatile
   790                           
   791                           ;LCD.h: 103: Lcd_Port(y>>4);
   792  00FDDE  3816               	swapf	Lcd_Write_Char@y,w,c
   793  00FDE0  0B0F               	andlw	15
   794  00FDE2  EC96  F07E         	call	_Lcd_Port
   795                           
   796                           ;LCD.h: 104: PORTCbits.RC1 = 1;
   797  00FDE6  8282               	bsf	3970,1,c	;volatile
   798                           
   799                           ;LCD.h: 105: _delay((unsigned long)((20)*(16000000/4000.0)));
   800  00FDE8  0E68               	movlw	104
   801  00FDEA  6E14               	movwf	??_Lcd_Write_Char& (0+255),c
   802  00FDEC  0EE4               	movlw	228
   803  00FDEE                     u317:
   804  00FDEE  2EE8               	decfsz	wreg,f,c
   805  00FDF0  D7FE               	bra	u317
   806  00FDF2  2E14               	decfsz	??_Lcd_Write_Char& (0+255),f,c
   807  00FDF4  D7FC               	bra	u317
   808  00FDF6  D000               	nop2	
   809                           
   810                           ;LCD.h: 106: PORTCbits.RC1 = 0;
   811  00FDF8  9282               	bcf	3970,1,c	;volatile
   812                           
   813                           ;LCD.h: 107: Lcd_Port(temp);
   814  00FDFA  5015               	movf	Lcd_Write_Char@temp,w,c
   815  00FDFC  EC96  F07E         	call	_Lcd_Port
   816                           
   817                           ;LCD.h: 108: PORTCbits.RC1 = 1;
   818  00FE00  8282               	bsf	3970,1,c	;volatile
   819                           
   820                           ;LCD.h: 109: _delay((unsigned long)((20)*(16000000/4000.0)));
   821  00FE02  0E68               	movlw	104
   822  00FE04  6E14               	movwf	??_Lcd_Write_Char& (0+255),c
   823  00FE06  0EE4               	movlw	228
   824  00FE08                     u327:
   825  00FE08  2EE8               	decfsz	wreg,f,c
   826  00FE0A  D7FE               	bra	u327
   827  00FE0C  2E14               	decfsz	??_Lcd_Write_Char& (0+255),f,c
   828  00FE0E  D7FC               	bra	u327
   829  00FE10  D000               	nop2	
   830                           
   831                           ;LCD.h: 110: PORTCbits.RC1 = 0;
   832  00FE12  9282               	bcf	3970,1,c	;volatile
   833  00FE14  0012               	return		;funcret
   834  00FE16                     __end_of_Lcd_Write_Char:
   835                           	opt stack 0
   836                           intcon	equ	0xFF2
   837                           wreg	equ	0xFE8
   838                           indf2	equ	0xFDF
   839                           fsr2h	equ	0xFDA
   840                           fsr2l	equ	0xFD9
   841                           status	equ	0xFD8
   842                           
   843 ;; *************** function _Lcd_Init *****************
   844 ;; Defined at:
   845 ;;		line 78 in file "LCD.h"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;		None
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;Total ram usage:        0 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    3
   866 ;; This function calls:
   867 ;;		_Lcd_Cmd
   868 ;;		_Lcd_Port
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text6
   875  00FE68                     __ptext6:
   876                           	opt stack 0
   877  00FE68                     _Lcd_Init:
   878                           	opt stack 27
   879                           
   880                           ;LCD.h: 80: Lcd_Port(0x00);
   881                           
   882                           ;incstack = 0
   883  00FE68  0E00               	movlw	0
   884  00FE6A  EC96  F07E         	call	_Lcd_Port
   885                           
   886                           ;LCD.h: 81: _delay((unsigned long)((20)*(16000000/4000000.0)));
   887  00FE6E  0E1A               	movlw	26
   888  00FE70                     u337:
   889  00FE70  2EE8               	decfsz	wreg,f,c
   890  00FE72  D7FE               	bra	u337
   891  00FE74  D000               	nop2	
   892                           
   893                           ;LCD.h: 82: Lcd_Cmd(0x03);
   894  00FE76  0E03               	movlw	3
   895  00FE78  EC87  F07E         	call	_Lcd_Cmd
   896                           
   897                           ;LCD.h: 83: _delay((unsigned long)((5)*(16000000/4000000.0)));
   898  00FE7C  0E06               	movlw	6
   899  00FE7E                     u347:
   900  00FE7E  2EE8               	decfsz	wreg,f,c
   901  00FE80  D7FE               	bra	u347
   902  00FE82  D000               	nop2	
   903                           
   904                           ;LCD.h: 84: Lcd_Cmd(0x03);
   905  00FE84  0E03               	movlw	3
   906  00FE86  EC87  F07E         	call	_Lcd_Cmd
   907                           
   908                           ;LCD.h: 85: _delay((unsigned long)((11)*(16000000/4000000.0)));
   909  00FE8A  0E0E               	movlw	14
   910  00FE8C                     u357:
   911  00FE8C  2EE8               	decfsz	wreg,f,c
   912  00FE8E  D7FE               	bra	u357
   913  00FE90  D000               	nop2	
   914                           
   915                           ;LCD.h: 86: Lcd_Cmd(0x03);
   916  00FE92  0E03               	movlw	3
   917  00FE94  EC87  F07E         	call	_Lcd_Cmd
   918                           
   919                           ;LCD.h: 88: Lcd_Cmd(0x02);
   920  00FE98  0E02               	movlw	2
   921  00FE9A  EC87  F07E         	call	_Lcd_Cmd
   922                           
   923                           ;LCD.h: 89: Lcd_Cmd(0x02);
   924  00FE9E  0E02               	movlw	2
   925  00FEA0  EC87  F07E         	call	_Lcd_Cmd
   926                           
   927                           ;LCD.h: 90: Lcd_Cmd(0x08);
   928  00FEA4  0E08               	movlw	8
   929  00FEA6  EC87  F07E         	call	_Lcd_Cmd
   930                           
   931                           ;LCD.h: 91: Lcd_Cmd(0x00);
   932  00FEAA  0E00               	movlw	0
   933  00FEAC  EC87  F07E         	call	_Lcd_Cmd
   934                           
   935                           ;LCD.h: 92: Lcd_Cmd(0x0C);
   936  00FEB0  0E0C               	movlw	12
   937  00FEB2  EC87  F07E         	call	_Lcd_Cmd
   938                           
   939                           ;LCD.h: 93: Lcd_Cmd(0x00);
   940  00FEB6  0E00               	movlw	0
   941  00FEB8  EC87  F07E         	call	_Lcd_Cmd
   942                           
   943                           ;LCD.h: 94: Lcd_Cmd(0x06);
   944  00FEBC  0E06               	movlw	6
   945  00FEBE  EC87  F07E         	call	_Lcd_Cmd
   946  00FEC2  0012               	return		;funcret
   947  00FEC4                     __end_of_Lcd_Init:
   948                           	opt stack 0
   949                           intcon	equ	0xFF2
   950                           wreg	equ	0xFE8
   951                           indf2	equ	0xFDF
   952                           fsr2h	equ	0xFDA
   953                           fsr2l	equ	0xFD9
   954                           status	equ	0xFD8
   955                           
   956 ;; *************** function _Lcd_Clear *****************
   957 ;; Defined at:
   958 ;;		line 35 in file "LCD.h"
   959 ;; Parameters:    Size  Location     Type
   960 ;;		None
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  2   48[None  ] int 
   965 ;; Registers used:
   966 ;;		wreg, status,2, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   976 ;;Total ram usage:        0 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    3
   979 ;; This function calls:
   980 ;;		_Lcd_Cmd
   981 ;; This function is called by:
   982 ;;		_main
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text7
   987  00FCF2                     __ptext7:
   988                           	opt stack 0
   989  00FCF2                     _Lcd_Clear:
   990                           	opt stack 27
   991                           
   992                           ;LCD.h: 37: Lcd_Cmd(0);
   993                           
   994                           ;incstack = 0
   995  00FCF2  0E00               	movlw	0
   996  00FCF4  EC87  F07E         	call	_Lcd_Cmd
   997                           
   998                           ;LCD.h: 38: Lcd_Cmd(1);
   999  00FCF8  0E01               	movlw	1
  1000  00FCFA  EC87  F07E         	call	_Lcd_Cmd
  1001  00FCFE  0012               	return		;funcret
  1002  00FD00                     __end_of_Lcd_Clear:
  1003                           	opt stack 0
  1004                           intcon	equ	0xFF2
  1005                           wreg	equ	0xFE8
  1006                           indf2	equ	0xFDF
  1007                           fsr2h	equ	0xFDA
  1008                           fsr2l	equ	0xFD9
  1009                           status	equ	0xFD8
  1010                           
  1011 ;; *************** function _Lcd_Cmd *****************
  1012 ;; Defined at:
  1013 ;;		line 26 in file "LCD.h"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  a               1    wreg     unsigned char 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  a               1   19[COMRAM] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  1    wreg      void 
  1020 ;; Registers used:
  1021 ;;		wreg, status,2, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1031 ;;Total ram usage:        1 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    2
  1034 ;; This function calls:
  1035 ;;		_Lcd_Port
  1036 ;; This function is called by:
  1037 ;;		_Lcd_Clear
  1038 ;;		_Lcd_Init
  1039 ;;		_Lcd_Set_Cursor
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text8
  1044  00FD0E                     __ptext8:
  1045                           	opt stack 0
  1046  00FD0E                     _Lcd_Cmd:
  1047                           	opt stack 27
  1048                           
  1049                           ;incstack = 0
  1050                           ;Lcd_Cmd@a stored from wreg
  1051  00FD0E  6E14               	movwf	Lcd_Cmd@a,c
  1052                           
  1053                           ;LCD.h: 28: PORTCbits.RC0 = 0;
  1054  00FD10  9082               	bcf	3970,0,c	;volatile
  1055                           
  1056                           ;LCD.h: 29: Lcd_Port(a);
  1057  00FD12  5014               	movf	Lcd_Cmd@a,w,c
  1058  00FD14  EC96  F07E         	call	_Lcd_Port
  1059                           
  1060                           ;LCD.h: 30: PORTCbits.RC1 = 1;
  1061  00FD18  8282               	bsf	3970,1,c	;volatile
  1062                           
  1063                           ;LCD.h: 31: _delay((unsigned long)((400)*(16000000/4000000.0)));
  1064  00FD1A  0EE4               	movlw	228
  1065  00FD1C                     u367:
  1066  00FD1C  D000               	nop2	
  1067  00FD1E  D000               	nop2	
  1068  00FD20  2EE8               	decfsz	wreg,f,c
  1069  00FD22  D7FC               	bra	u367
  1070  00FD24  D000               	nop2	
  1071  00FD26  D000               	nop2	
  1072                           
  1073                           ;LCD.h: 32: PORTCbits.RC1 = 0;
  1074  00FD28  9282               	bcf	3970,1,c	;volatile
  1075  00FD2A  0012               	return		;funcret
  1076  00FD2C                     __end_of_Lcd_Cmd:
  1077                           	opt stack 0
  1078                           intcon	equ	0xFF2
  1079                           wreg	equ	0xFE8
  1080                           indf2	equ	0xFDF
  1081                           fsr2h	equ	0xFDA
  1082                           fsr2l	equ	0xFD9
  1083                           status	equ	0xFD8
  1084                           
  1085 ;; *************** function _Lcd_Port *****************
  1086 ;; Defined at:
  1087 ;;		line 4 in file "LCD.h"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  a               1    wreg     unsigned char 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  a               1   18[COMRAM] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1105 ;;Total ram usage:        1 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    1
  1108 ;; This function calls:
  1109 ;;		Nothing
  1110 ;; This function is called by:
  1111 ;;		_Lcd_Cmd
  1112 ;;		_Lcd_Init
  1113 ;;		_Lcd_Write_Char
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           	psect	text9
  1118  00FD2C                     __ptext9:
  1119                           	opt stack 0
  1120  00FD2C                     _Lcd_Port:
  1121                           	opt stack 27
  1122                           
  1123                           ;incstack = 0
  1124                           ;Lcd_Port@a stored from wreg
  1125  00FD2C  6E13               	movwf	Lcd_Port@a,c
  1126                           
  1127                           ;LCD.h: 6: if(a & 1)
  1128  00FD2E  A013               	btfss	Lcd_Port@a,0,c
  1129  00FD30  D002               	goto	l35
  1130                           
  1131                           ;LCD.h: 7: PORTBbits.RB4 = 1;
  1132  00FD32  8881               	bsf	3969,4,c	;volatile
  1133  00FD34  D001               	goto	l36
  1134  00FD36                     l35:
  1135                           
  1136                           ;LCD.h: 8: else
  1137                           ;LCD.h: 9: PORTBbits.RB4 = 0;
  1138  00FD36  9881               	bcf	3969,4,c	;volatile
  1139  00FD38                     l36:
  1140                           
  1141                           ;LCD.h: 11: if(a & 2)
  1142  00FD38  A213               	btfss	Lcd_Port@a,1,c
  1143  00FD3A  D002               	goto	l37
  1144                           
  1145                           ;LCD.h: 12: PORTBbits.RB5 = 1;
  1146  00FD3C  8A81               	bsf	3969,5,c	;volatile
  1147  00FD3E  D001               	goto	l38
  1148  00FD40                     l37:
  1149                           
  1150                           ;LCD.h: 13: else
  1151                           ;LCD.h: 14: PORTBbits.RB5 = 0;
  1152  00FD40  9A81               	bcf	3969,5,c	;volatile
  1153  00FD42                     l38:
  1154                           
  1155                           ;LCD.h: 16: if(a & 4)
  1156  00FD42  A413               	btfss	Lcd_Port@a,2,c
  1157  00FD44  D002               	goto	l39
  1158                           
  1159                           ;LCD.h: 17: PORTCbits.RC2 = 1;
  1160  00FD46  8482               	bsf	3970,2,c	;volatile
  1161  00FD48  D001               	goto	l40
  1162  00FD4A                     l39:
  1163                           
  1164                           ;LCD.h: 18: else
  1165                           ;LCD.h: 19: PORTCbits.RC2 = 0;
  1166  00FD4A  9482               	bcf	3970,2,c	;volatile
  1167  00FD4C                     l40:
  1168                           
  1169                           ;LCD.h: 21: if(a & 8)
  1170  00FD4C  A613               	btfss	Lcd_Port@a,3,c
  1171  00FD4E  D002               	goto	l41
  1172                           
  1173                           ;LCD.h: 22: PORTCbits.RC3 = 1;
  1174  00FD50  8682               	bsf	3970,3,c	;volatile
  1175  00FD52  0012               	return	
  1176  00FD54                     l41:
  1177                           
  1178                           ;LCD.h: 23: else
  1179                           ;LCD.h: 24: PORTCbits.RC3 = 0;
  1180  00FD54  9682               	bcf	3970,3,c	;volatile
  1181  00FD56  0012               	return	
  1182  00FD58                     __end_of_Lcd_Port:
  1183                           	opt stack 0
  1184                           intcon	equ	0xFF2
  1185                           wreg	equ	0xFE8
  1186                           indf2	equ	0xFDF
  1187                           fsr2h	equ	0xFDA
  1188                           fsr2l	equ	0xFD9
  1189                           status	equ	0xFD8
  1190                           
  1191 ;; *************** function _Timer0_ISR *****************
  1192 ;; Defined at:
  1193 ;;		line 47 in file "CountMain.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;		None
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;		None
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		status,2, status,0
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1211 ;;Total ram usage:       18 bytes
  1212 ;; Hardware stack levels used:    1
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		Interrupt level 2
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	intcode
  1221  000002                     __pintcode:
  1222                           	opt stack 0
  1223  000002                     _Timer0_ISR:
  1224                           	opt stack 27
  1225                           
  1226                           ;incstack = 0
  1227  000002  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1228  000004  CFFA F001          	movff	pclath,??_Timer0_ISR
  1229  000008  CFFB F002          	movff	pclatu,??_Timer0_ISR+1
  1230  00000C  CFE9 F003          	movff	fsr0l,??_Timer0_ISR+2
  1231  000010  CFEA F004          	movff	fsr0h,??_Timer0_ISR+3
  1232  000014  CFE1 F005          	movff	fsr1l,??_Timer0_ISR+4
  1233  000018  CFE2 F006          	movff	fsr1h,??_Timer0_ISR+5
  1234  00001C  CFD9 F007          	movff	fsr2l,??_Timer0_ISR+6
  1235  000020  CFDA F008          	movff	fsr2h,??_Timer0_ISR+7
  1236  000024  CFF3 F009          	movff	prodl,??_Timer0_ISR+8
  1237  000028  CFF4 F00A          	movff	prodh,??_Timer0_ISR+9
  1238  00002C  CFF6 F00B          	movff	tblptrl,??_Timer0_ISR+10
  1239  000030  CFF7 F00C          	movff	tblptrh,??_Timer0_ISR+11
  1240  000034  CFF8 F00D          	movff	tblptru,??_Timer0_ISR+12
  1241  000038  CFF5 F00E          	movff	tablat,??_Timer0_ISR+13
  1242  00003C  C045  F00F         	movff	btemp,??_Timer0_ISR+14
  1243  000040  C046  F010         	movff	btemp+1,??_Timer0_ISR+15
  1244  000044  C047  F011         	movff	btemp+2,??_Timer0_ISR+16
  1245  000048  C048  F012         	movff	btemp+3,??_Timer0_ISR+17
  1246                           
  1247                           ;CountMain.c: 49: if (INTCONbits.TMR0IF == 1)
  1248  00004C  A4F2               	btfss	intcon,2,c	;volatile
  1249  00004E  D003               	goto	i2l78
  1250                           
  1251                           ;CountMain.c: 50: {
  1252                           ;CountMain.c: 51: counter++;
  1253  000050  4A43               	infsnz	_counter,f,c
  1254  000052  2A44               	incf	_counter+1,f,c
  1255                           
  1256                           ;CountMain.c: 52: INTCONbits.TMR0IF = 0;
  1257  000054  94F2               	bcf	intcon,2,c	;volatile
  1258  000056                     i2l78:
  1259  000056  C012  F048         	movff	??_Timer0_ISR+17,btemp+3
  1260  00005A  C011  F047         	movff	??_Timer0_ISR+16,btemp+2
  1261  00005E  C010  F046         	movff	??_Timer0_ISR+15,btemp+1
  1262  000062  C00F  F045         	movff	??_Timer0_ISR+14,btemp
  1263  000066  C00E  FFF5         	movff	??_Timer0_ISR+13,tablat
  1264  00006A  C00D  FFF8         	movff	??_Timer0_ISR+12,tblptru
  1265  00006E  C00C  FFF7         	movff	??_Timer0_ISR+11,tblptrh
  1266  000072  C00B  FFF6         	movff	??_Timer0_ISR+10,tblptrl
  1267  000076  C00A  FFF4         	movff	??_Timer0_ISR+9,prodh
  1268  00007A  C009  FFF3         	movff	??_Timer0_ISR+8,prodl
  1269  00007E  C008  FFDA         	movff	??_Timer0_ISR+7,fsr2h
  1270  000082  C007  FFD9         	movff	??_Timer0_ISR+6,fsr2l
  1271  000086  C006  FFE2         	movff	??_Timer0_ISR+5,fsr1h
  1272  00008A  C005  FFE1         	movff	??_Timer0_ISR+4,fsr1l
  1273  00008E  C004  FFEA         	movff	??_Timer0_ISR+3,fsr0h
  1274  000092  C003  FFE9         	movff	??_Timer0_ISR+2,fsr0l
  1275  000096  C002  FFFB         	movff	??_Timer0_ISR+1,pclatu
  1276  00009A  C001  FFFA         	movff	??_Timer0_ISR,pclath
  1277  00009E  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1278  0000A0  0011               	retfie		f
  1279  0000A2                     __end_of_Timer0_ISR:
  1280                           	opt stack 0
  1281  0000                     pclatu	equ	0xFFB
  1282                           pclath	equ	0xFFA
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           prodh	equ	0xFF4
  1288                           prodl	equ	0xFF3
  1289                           intcon	equ	0xFF2
  1290                           fsr0h	equ	0xFEA
  1291                           fsr0l	equ	0xFE9
  1292                           wreg	equ	0xFE8
  1293                           fsr1h	equ	0xFE2
  1294                           fsr1l	equ	0xFE1
  1295                           indf2	equ	0xFDF
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           pclatu	equ	0xFFB
  1300                           pclath	equ	0xFFA
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           prodh	equ	0xFF4
  1306                           prodl	equ	0xFF3
  1307                           intcon	equ	0xFF2
  1308                           fsr0h	equ	0xFEA
  1309                           fsr0l	equ	0xFE9
  1310                           wreg	equ	0xFE8
  1311                           fsr1h	equ	0xFE2
  1312                           fsr1l	equ	0xFE1
  1313                           indf2	equ	0xFDF
  1314                           fsr2h	equ	0xFDA
  1315                           fsr2l	equ	0xFD9
  1316                           status	equ	0xFD8
  1317                           
  1318                           	psect	rparam
  1319  0000                     pclatu	equ	0xFFB
  1320                           pclath	equ	0xFFA
  1321                           tblptru	equ	0xFF8
  1322                           tblptrh	equ	0xFF7
  1323                           tblptrl	equ	0xFF6
  1324                           tablat	equ	0xFF5
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           intcon	equ	0xFF2
  1328                           fsr0h	equ	0xFEA
  1329                           fsr0l	equ	0xFE9
  1330                           wreg	equ	0xFE8
  1331                           fsr1h	equ	0xFE2
  1332                           fsr1l	equ	0xFE1
  1333                           indf2	equ	0xFDF
  1334                           fsr2h	equ	0xFDA
  1335                           fsr2l	equ	0xFD9
  1336                           status	equ	0xFD8
  1337                           
  1338                           	psect	temp
  1339  000045                     btemp:
  1340                           	opt stack 0
  1341  000045                     	ds	1
  1342  0000                     int$flags	set	btemp
  1343  0000                     wtemp6	set	btemp+1
  1344                           pclatu	equ	0xFFB
  1345                           pclath	equ	0xFFA
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           prodh	equ	0xFF4
  1351                           prodl	equ	0xFF3
  1352                           intcon	equ	0xFF2
  1353                           fsr0h	equ	0xFEA
  1354                           fsr0l	equ	0xFE9
  1355                           wreg	equ	0xFE8
  1356                           fsr1h	equ	0xFE2
  1357                           fsr1l	equ	0xFE1
  1358                           indf2	equ	0xFDF
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      68
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(2) Largest target is 25
		 -> main@array(COMRAM[25]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 0

    sp__utoa	PTR unsigned char  size(2) Largest target is 25
		 -> main@array(COMRAM[25]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 25
		 -> main@array(COMRAM[25]), 


Critical Paths under _main in COMRAM

    _main->_utoa
    _utoa->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _Timer0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Timer0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Timer0_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Timer0_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Timer0_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Timer0_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Timer0_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Timer0_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Timer0_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Timer0_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Timer0_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Timer0_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Timer0_ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                32    27      5    2042
                                             34 COMRAM    32    27      5
                          _Lcd_Clear
                           _Lcd_Init
                   _Lcd_Write_String
                         _Set_Cursor
                               _utoa
 ---------------------------------------------------------------------------------
 (1) _utoa                                                 9     3      6    1496
                                             25 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                             18 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Set_Cursor                                           4     0      4       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     2      2     286
                                             23 COMRAM     4     2      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     120
                                             19 COMRAM     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             0     0      0     135
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              1     1      0      75
                                             19 COMRAM     1     1      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Timer0_ISR                                          18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Set_Cursor
   _utoa
     ___lwdiv
     ___lwmod

 _Timer0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     42      44       1       72.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      44      12        0.0%
DATA                 0      0      44       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Oct 29 15:02:49 2017

                       l40 FD4C                         l41 FD54                         l35 FD36  
                       l36 FD38                         l37 FD40                         l38 FD42  
                       l39 FD4A                         l68 FD78                         l84 FF06  
                       l69 FD62                        l510 FE54                        l511 FE5E  
                      l423 FF64                        l520 FDBA                        l521 FDC4  
                      l425 FF9E                        l506 FE34                        l426 FFDC  
                      l507 FE2C                        l516 FDA2                        l517 FD9A  
                      u210 FE38                        u240 FDA6                        u307 FF4C  
                      u317 FDEE                        u327 FE08                        u337 FE70  
                      u347 FE7E                        u357 FE8C                        u367 FD1C  
                      wreg 000FE8               __CFG_LVP$OFF 000000                       i2l78 0056  
        ?_Lcd_Write_String 0018                       _main FEC4                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 0045                       _utoa FF5C                       prodh 000FF4  
                     prodl 000FF3                       start 00A2         ??_Lcd_Write_String 001A  
          __end_of_Lcd_Cmd FD2C               ___param_bank 000000                      ?_main 0023  
                    ?_utoa 001A                      _T0CON 000FD5            __end_of___lwdiv FE68  
          __end_of___lwmod FDCE                      _TMR0L 000FD6                      _TRISB 000F93  
                    _TRISC 000F94                      pclath 000FFA                      tablat 000FF5  
                    utoa@c 0022                      utoa@v 0020                      status 000FD8  
                    wtemp6 0046           __end_of_Lcd_Init FEC4           __end_of_Lcd_Port FD58  
          __initialization FD00               __end_of_main FF5C               __end_of_utoa 0000  
                   ??_main 0028                     ??_utoa 0020         __size_of_Lcd_Clear 000E  
            __activetblptr 000000                     _ANSELA 000F38                     _ANSELB 000F39  
                   _ANSELC 000F3A                 _Set_Cursor 0000             __CFG_WDTEN$OFF 000000  
                   _OSCCON 000FD3                  ??_Lcd_Cmd 0014    __size_of_Lcd_Write_Char 0048  
               _Timer0_ISR 0002             __CFG_PWRTEN$ON 000000                  ??___lwdiv 0017  
                ??___lwmod 0017                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                 __accesstop 0060    __end_of__initialization FD04  
        __end_of_Lcd_Clear FD00              ___rparam_used 000001             __pcstackCOMRAM 0001  
                ?_Lcd_Init 0001                  ?_Lcd_Port 0001                ?_Set_Cursor 0001  
              ?_Timer0_ISR 0001  __size_of_Lcd_Write_String 0034                 ??_Lcd_Init 0015  
               ??_Lcd_Port 0013             _Lcd_Write_Char FDCE                    _Lcd_Cmd FD0E  
                  __Hparam 0000                    __Lparam 0000                    ___lwdiv FE16  
                  ___lwmod FD8C                    __pcinit FD00                    __ramtop 1000  
                  __ptext0 FEC4                    __ptext1 FF5C                    __ptext2 FD8C  
                  __ptext3 FE16                    __ptext4 FD58                    __ptext5 FDCE  
                  __ptext6 FE68                    __ptext7 FCF2                    __ptext8 FD0E  
                  __ptext9 FD2C                  _T0CONbits 000FD5                    _counter 0043  
      __size_of_Timer0_ISR 00A0     __end_of_Lcd_Write_Char FE16       end_of_initialization FD04  
                Lcd_Port@a 0013                    utoa@buf 001A                    utoa@val 001C  
                _PORTBbits 000F81                  _PORTCbits 000F82                  _TRISAbits 000F92  
          ?_Lcd_Write_Char 0001          Lcd_Write_String@a 0018          Lcd_Write_String@i 001A  
                _Lcd_Clear FCF2           _Lcd_Write_String FD58        start_initialization FD00  
             ??_Set_Cursor 0001          __size_of_Lcd_Init 005C          __size_of_Lcd_Port 002C  
             ??_Timer0_ISR 0001                 ?_Lcd_Clear 0001            Lcd_Write_Char@a 0017  
          Lcd_Write_Char@y 0016                __pbssCOMRAM 0043         __end_of_Timer0_ISR 00A2  
                 ?_Lcd_Cmd 0001           ___lwdiv@dividend 0013                  __pintcode 0002  
                 ?___lwdiv 0013                   ?___lwmod 0013           ___lwdiv@quotient 0017  
                 Lcd_Cmd@a 0014                ??_Lcd_Clear 0015                  main@array 002A  
         ??_Lcd_Write_Char 0014                   _Lcd_Init FE68                   _Lcd_Port FD2C  
 __end_of_Lcd_Write_String FD8C           __size_of_Lcd_Cmd 001E                   __Hrparam 0000  
                 __Lrparam 0000           __size_of___lwdiv 0052           __size_of___lwmod 0042  
          ___lwdiv@divisor 0015            ___lwdiv@counter 0019              __size_of_main 0098  
            __size_of_utoa 00A4                   int$flags 0045                   main@argc 0023  
                 main@argv 0025                 _INTCONbits 000FF2         Lcd_Write_Char@temp 0015  
                 intlevel2 0000           ___lwmod@dividend 0013                   utoa@base 001E  
          ___lwmod@divisor 0015            ___lwmod@counter 0017          __CFG_FOSC$INTIO67 000000  
